//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `MusicManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package MusicServer;

public class MusicInfo implements Cloneable,
                                  java.io.Serializable
{
    public String title;

    public String artist;

    public MusicInfo()
    {
        this.title = "";
        this.artist = "";
    }

    public MusicInfo(String title, String artist)
    {
        this.title = title;
        this.artist = artist;
    }

    public boolean equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MusicInfo r = null;
        if(rhs instanceof MusicInfo)
        {
            r = (MusicInfo)rhs;
        }

        if(r != null)
        {
            if(this.title != r.title)
            {
                if(this.title == null || r.title == null || !this.title.equals(r.title))
                {
                    return false;
                }
            }
            if(this.artist != r.artist)
            {
                if(this.artist == null || r.artist == null || !this.artist.equals(r.artist))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::MusicServer::MusicInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, title);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, artist);
        return h_;
    }

    public MusicInfo clone()
    {
        MusicInfo c = null;
        try
        {
            c = (MusicInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.title);
        ostr.writeString(this.artist);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.title = istr.readString();
        this.artist = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, MusicInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public MusicInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        MusicInfo v = new MusicInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<MusicInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, MusicInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<MusicInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(MusicInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final MusicInfo _nullMarshalValue = new MusicInfo();

    /** @hidden */
    public static final long serialVersionUID = -9017100282699197559L;
}
