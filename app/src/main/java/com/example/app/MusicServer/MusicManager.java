//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `MusicManager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package MusicServer;

public interface MusicManager extends com.zeroc.Ice.Object
{
    MusicInfo[] listAllMusic(com.zeroc.Ice.Current current);

    MusicInfo[] listMusicByTitle(String title, com.zeroc.Ice.Current current);

    MusicInfo[] listMusicByArtist(String artist, com.zeroc.Ice.Current current);

    void addMusic(byte[] file, String title, String artist, com.zeroc.Ice.Current current);

    void deleteMusic(String title, String artist, com.zeroc.Ice.Current current)
        throws MusicNotFoundError;

    void updateMusic(String title, String artist, String newTitle, String newArtist, com.zeroc.Ice.Current current);

    byte[] playMusic(String title, String artist, com.zeroc.Ice.Current current)
        throws MusicNotFoundError;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::MusicServer::MusicManager"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::MusicServer::MusicManager";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listAllMusic(MusicManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        MusicInfo[] ret = obj.listAllMusic(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        seqMusicInfoHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listMusicByTitle(MusicManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        iceP_title = istr.readString();
        inS.endReadParams();
        MusicInfo[] ret = obj.listMusicByTitle(iceP_title, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        seqMusicInfoHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listMusicByArtist(MusicManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_artist;
        iceP_artist = istr.readString();
        inS.endReadParams();
        MusicInfo[] ret = obj.listMusicByArtist(iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        seqMusicInfoHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addMusic(MusicManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        byte[] iceP_file;
        String iceP_title;
        String iceP_artist;
        iceP_file = istr.readByteSeq();
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        inS.endReadParams();
        obj.addMusic(iceP_file, iceP_title, iceP_artist, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteMusic(MusicManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_artist;
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        inS.endReadParams();
        obj.deleteMusic(iceP_title, iceP_artist, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateMusic(MusicManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_artist;
        String iceP_newTitle;
        String iceP_newArtist;
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        iceP_newTitle = istr.readString();
        iceP_newArtist = istr.readString();
        inS.endReadParams();
        obj.updateMusic(iceP_title, iceP_artist, iceP_newTitle, iceP_newArtist, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_playMusic(MusicManager obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_title;
        String iceP_artist;
        iceP_title = istr.readString();
        iceP_artist = istr.readString();
        inS.endReadParams();
        byte[] ret = obj.playMusic(iceP_title, iceP_artist, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addMusic",
        "deleteMusic",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "listAllMusic",
        "listMusicByArtist",
        "listMusicByTitle",
        "playMusic",
        "updateMusic"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addMusic(this, in, current);
            }
            case 1:
            {
                return _iceD_deleteMusic(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 6:
            {
                return _iceD_listAllMusic(this, in, current);
            }
            case 7:
            {
                return _iceD_listMusicByArtist(this, in, current);
            }
            case 8:
            {
                return _iceD_listMusicByTitle(this, in, current);
            }
            case 9:
            {
                return _iceD_playMusic(this, in, current);
            }
            case 10:
            {
                return _iceD_updateMusic(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
